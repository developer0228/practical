Pract. 1 : Arduino / Raspberry PI

Code:

import RPi.GPIO as GPIO
import time

# Setup GPIO
GPIO.setwarnings(False)
TRIG = 11
ECHO = 8
servoPIN = 18

GPIO.setmode(GPIO.BCM)

# Ultrasonic sensor pin initialization
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

# Servo motor pin initialization
GPIO.setup(servoPIN, GPIO.OUT)
servo = GPIO.PWM(servoPIN, 50)
servo.start(2.5)

try:
    while True:
        # Trigger the ultrasonic pulse
        GPIO.output(TRIG, False)
        time.sleep(0.000002)
        GPIO.output(TRIG, True)
        time.sleep(0.00001)
        GPIO.output(TRIG, False)

        # Measure the duration of the echo pulse
        startTime = time.time()
        stopTime = time.time()

        while GPIO.input(ECHO) == 0:
            startTime = time.time()

        while GPIO.input(ECHO) == 1:
            stopTime = time.time()

        # Calculate distance
        timeElapsed = stopTime - startTime
        distance = (timeElapsed * 34300) / 2
        distance = int(distance)
        print("Distance: {} cm".format(distance))

        # Control the servo motor based on distance
        if distance <= 20:
            duty_cycle = 12.5  # Adjust this value for the desired servo position
            servo.ChangeDutyCycle(duty_cycle)
            print("Motor Rotated")
            time.sleep(0.1)
        else:
            duty_cycle = 2.5  # Adjust this value for the original servo position
            servo.ChangeDutyCycle(duty_cycle)
            print("Motor is at original position")
            time.sleep(0.1)

except KeyboardInterrupt:
    # Cleanup GPIO settings
    servo.stop()
    GPIO.cleanup()



-----------------------------------------------------------------------------------------------------------------

Practical 2: Monitoring IOT System

code: 

import Adafruit_DHT
import os
import sys
from time import sleep
import requests
import RPi.GPIO as GPIO

# Base URL for ThingSpeak API
baseURL = 'https://api.thingspeak.com/update?api_key=WRITE_API_KEY'
SensorPin = 4

while True:
    try:
        print("Program is Running")

        # Read humidity and temperature from DHT11 sensor
        humi, temp = Adafruit_DHT.read(Adafruit_DHT.DHT11, SensorPin)

        # Check if valid data is received
        if (humi > 0) and (temp > 0):
            print("Humidity: {}%".format(humi))
            print("Temperature: {}Â°C".format(temp))
            print("Data received")

            # Construct the URL for ThingSpeak API request
            x = '{}{}{}{}{}'.format(baseURL, '&field1=', temp, '&field2=', humi)
            y = requests.post(x)

            # Print the HTTP response status code and URL
            print("Response Code:", y.status_code)
            print("Request URL:", x)

        # Wait for 5 seconds before the next reading
        sleep(5)

    except Exception as e:
        # Handle any exceptions and print an error message
        print("Data not received:", str(e))
        sleep(5)



--------------------------------------------------------------------------------------------------



Practical 3: Real time monitoring Android App

Code:

Here's your code with proper indentation and formatting:

```python
import RPi.GPIO as GPIO
import time

# GPIO Setup
channel = 4
GPIO.setmode(GPIO.BCM)
GPIO.setup(channel, GPIO.IN)

# Callback function for water detection
def callback(channel):
    if GPIO.input(channel):
        print("Water detected!")
    else:
        print("Water not detected!")

# Event detection for the sensor
GPIO.add_event_detect(channel, GPIO.BOTH, bouncetime=300)
GPIO.add_event_callback(channel, callback)

# Infinite loop to keep the program running
try:
    while True:
        time.sleep(0.1)

except KeyboardInterrupt:
    print("\nProgram interrupted. Cleaning up GPIO...")
    GPIO.cleanup()
```



